version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: dex_postgres
    environment:
      POSTGRES_DB: dex_trading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dex_network
    restart: unless-stopped

  mongodb:
    image: mongo:7
    container_name: dex_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: dex_trading
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - dex_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: dex_redis
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dex_network
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7-alpine
    container_name: dex_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123456
      DOCKER_INFLUXDB_INIT_ORG: dex_trading
      DOCKER_INFLUXDB_INIT_BUCKET: trading_metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: dex_trading_token_123456789
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - dex_network
    restart: unless-stopped

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dex_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/dex_trading
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/dex_trading?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: dex_trading_token_123456789
      INFLUXDB_ORG: dex_trading
      INFLUXDB_BUCKET: trading_metrics
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - mongodb
      - redis
      - influxdb
    networks:
      - dex_network
    restart: unless-stopped
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dex_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - dex_network
    restart: unless-stopped
    command: npm run dev

  trading-engine:
    build:
      context: ./trading-engine
      dockerfile: Dockerfile
    container_name: dex_trading_engine
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/dex_trading
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/dex_trading?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: dex_trading_token_123456789
      LOG_LEVEL: INFO
    volumes:
      - ./trading-engine:/app
      - trading_logs:/var/log
    depends_on:
      - postgres
      - mongodb
      - redis
      - influxdb
      - backend
    networks:
      - dex_network
    restart: unless-stopped
    command: python src/main.py

  # =============================================================================
  # MONITORING & UTILITIES
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: dex_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - dex_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: dex_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - influxdb
    networks:
      - dex_network
    restart: unless-stopped

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  dex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  grafana_data:
    driver: local
  trading_logs:
    driver: local

